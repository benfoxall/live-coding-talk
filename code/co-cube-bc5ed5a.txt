//+https://cdnjs.cloudflare.com/ajax/libs/sylvester/0.1.3/sylvester.min.js

import {loop, drawEdges} from 'draw.js'
import {scale, rotateX, rotateY, rotateZ, perspective} from 'math.js'

const points = [
  [-10,-10,+10],
  [-10,+10,+10],
  [+10,+10,+10],
  [+10,-10,+10],

  [-10,-10,-10],
  [-10,+10,-10],
  [+10,+10,-10],
  [+10,-10,-10]
].map(v => $V(v))

const [p1, p2, p3, p4, p5, p6, p7, p8] = points
const edges = [
  [p1, p2], [p2, p3], [p3, p4], [p4, p1],
  [p5, p6], [p6, p7], [p7, p8], [p8, p5],
  [p1, p5], [p2, p6], [p3, p7], [p4, p8]
]

let orientation = scale(1)

loop( time => {
  const t =
    orientation
    .x(scale(2))
    .x(rotateZ(time/30000))
    .x(rotateX(time/15000))

  drawEdges(edges, t, perspective)

})

const torad = Math.PI/180
window.addEventListener('deviceorientation', (e) => {

  orientation =
    rotateY(e.gamma*torad)
    .x(rotateX(e.beta*torad))
    .x(rotateZ(e.alpha*torad))

}, false)
//____draw.js
const canvas = document.createElement('canvas')
export const ctx = canvas.getContext('2d')
document.body.appendChild(canvas)

let ratio, w, h

const size = _ => {
  ratio = window.devicePixelRatio || 1

  w = canvas.width = window.innerWidth * ratio
  h = canvas.height = window.innerHeight * ratio

  canvas.style.width = `${window.innerWidth}px`
  canvas.style.height = `${window.innerHeight}px`
  ctx.translate(canvas.width/2,canvas.height/2)
  ctx.scale(ratio,ratio)
}
size()

window.addEventListener('resize', size)

export const clear = () => {
  ctx.clearRect(-w/2,-h/2,w,h)
}


export function loop(fn){
  requestAnimationFrame(function wrapped(t){
    clear()
    requestAnimationFrame(wrapped)
    fn(t)
  })
}


export const drawEdges = (edges, transform, map = i=>i ) => {
  ctx.beginPath()
  edges
  .map(e => e.map(p => map(transform.multiply(p))))
  .forEach( ([a,b]) => {
    ctx.moveTo(a.e(1), a.e(2))
    ctx.lineTo(b.e(1), b.e(2))
  })
  ctx.stroke()
}
//____math.js
export const scale = s => $M([
  [s, 0, 0],
  [0, s, 0],
  [0, 0, s]
])

export const rotateX = theta => $M([
  [1,                0,               0],
  [0, Math.cos(theta), -Math.sin(theta)],
  [0, Math.sin(theta),  Math.cos(theta)],
])

export const rotateY = theta => $M([
  [Math.cos(theta), 0, -Math.sin(theta)],
  [0,               1,                0],
  [Math.sin(theta), 0,  Math.cos(theta)],
])

export const rotateZ = theta => $M([
  [Math.cos(theta), -Math.sin(theta), 0],
  [Math.sin(theta),  Math.cos(theta), 0],
  [0,                0,               1],
])

const pM = $M([
  [1, 0, 0, 0],
  [0, 1, 0, 0],
  [0, 0, 1, 0],
  [0, 0, 0.005,0.995]
])

export const perspective = v => {
  const v4 = pM.x($V(v.elements.concat(1)))

  return v4.x(v4.e(4))
}
